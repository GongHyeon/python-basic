part.1 자료형, 컴프리헨션, 리스트, 리스트 메서드, 큰따옴표와 작은따옴표



자료형
- 정수형(int) : 0 , 음의정수, 양의정수
- 실수형(real number) : 소수점까지 모두 포함. 1e9 => 1 x 10^9 이며, 파이썬에서 실수형으로 저장된다.
                        0.9라는 값을 수적으로 가질수 없다. 0.89999.. 로 가지기 때문이다.
                        ※ round() 반올림함수를 이용하여 원하는 값을 출력하자. round(123.456 , 2) => 123.46 으로 출력가능
                        나누기 연산자 또한 실수형으로 반환된다.
                        %는 나머지를 구하는 연산자이고, //는 몫을 구하는 연산자이다.
                        
-list 자료형 : 인덱스는 0부터 시작한다. (인덱스 : 리스트 자료형의 위치라고 생각하면 된다.) => a[3] 4번째 원소를 출력한다는 의미이다.
a= [0] * n(크기)  =>  [0,0,0,0,0 ...] n의 크기만큼 0이 붙은 리스트를 만든다.

N x M 크기의 2차원 리스트를 우리는 코딩테스트 할 때 많이 마주친다.

a = [i for i in range(50)] => print(a) => [0,1,2,3 .... ,49,50]

-리스트 컴프리헨션
# 0~19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i%2==1] 이다. i가 1일때는 몫이 0이고 나머지는 1이다.

# 1부터 9까지의 수들의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1,10)]

변수의 값이 상관 없을 때, 언더바를 쓰기도 한다.
ex) for _ in range(5):
    print("hello world")

- 리스트의 메서드
append  : 변수명.append() => 리스트에 원소삽입할때
sort    : 변수명.sort() => 기본 정렬 기능으로 오름차순 정렬 / 내림차순정렬은 변수명.sort(reverse=True)
reverse : 변수명.reverse() => 리스트의 원소의 순서를 모두 뒤집어 놓는다.
insert  : insert(삽입할 위치, 삽입할 값) => 특정한 인덱스 위치에 원소 삽입할때 사용한다.
count   : 변수명.count(특정값) => 리스트에서 특정한 값을 가지는 데이터의 개수를 셀 때 사용한다.
remove  : 변수명.remove(특정값) => 특정한 값을 갖는 원소를 제거하는데 값을 가진 원소가 여러개면 하나만 제거한다. /집합자료형 result = [i for i in a if i not in remove_set]

"" 안에서는 '' 사용가능, ''안에서는 ""사용가능. 추가로 사용해야하면 \" 할말 \" 로 적어주자.
글자는 숫자리스트에서 수를 바꿔주듯 a[2] = 'a' 와 같은 표현을 쓸 수 없다.

-튜플
리스트와 비슷하지만 분법적 차이가 있다. 한 번 선언된 값 변경할 수 없고, 소괄호()를 이용한다.(리스트는 대괄호 [])
리스트에 비해 상대적으로 공간 효율적이다.

사용하면 좋은경우 3가지
- 최단 경로 알고리즘
- 해싱의 키값
- 리스트 보다 메모리를 효율적으로 사용해야 할 때

